{"version":3,"sources":["../src/datasource.js"],"names":["_","signalfx","StreamHandler","ProxyHandler","SignalFxDatasource","instanceSettings","$q","backendSrv","templateSrv","datasourceId","id","type","url","name","q","withCredentials","authToken","jsonData","accessToken","headers","startsWith","proxyAccess","endpoint","replace","match","p1","p2","console","log","signalflow","window","streamer","SignalFlow","signalflowEndpoint","streams","interpolateQueryStr","bind","options","queries","filter","targets","t","hide","map","program","scopedVars","join","mutableOptions","clone","intervalMs","getMinResolution","aliases","collectAliases","maxDelay","getMaxDelay","Promise","resolve","data","getSignalflowHandler","start","fromPairs","alias","flatMap","extractLabelsWithAlias","re","labels","m","exec","push","max","minResolution","Math","handler","panelId","doRequest","method","then","response","status","message","title","query","metricNameQuery","getMetrics","propertyKeysQuery","getPropertyKeys","propertyValuesQuery","getPropertyValues","tagsQuery","getTags","when","mapFunc","mapPropertiesToTextValue","mapMetricsToTextValue","doQueryRequest","result","results","text","d","value","metric","partialInput","doSuggestQueryRequest","propertyKey","path","params","escapeQuery","limit","property","programText","packageSpecifications","request","programs","additionalFilters","additionalReplaceOnlyFilters","additionalQuery","JSON","stringify","doBackendProxyRequest","datasourceRequest","toPairs","encodeURIComponent","p","mapBackendProxyResponse","variable","defaultFormatFn","multi","includeAll","escapeLiteral","quoteLiteral","escapedValues","String"],"mappings":"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","file":"datasource.js","sourcesContent":["// Copyright (C) 2019-2020 Splunk, Inc. All rights reserved.\nimport _ from \"lodash\";\nimport signalfx from './signalfx';\nimport { StreamHandler } from './stream_handler';\nimport { ProxyHandler } from './proxy_handler';\n\nexport class SignalFxDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.datasourceId = instanceSettings.id;\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.authToken = instanceSettings.jsonData.accessToken;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (this.url.startsWith(\"/\")) {\n            this.proxyAccess = true;\n        } else {\n            this.headers['X-SF-TOKEN'] = this.authToken;\n            this.endpoint = instanceSettings.url.replace(/^(http)(s)?:/, function (match, p1, p2) {\n                return 'ws' + (p2 || '') + ':';\n            });\n            console.log('Using SignalFx at ' + this.endpoint);\n            this.signalflow = window.signalfx.streamer.SignalFlow(this.authToken, {\n                signalflowEndpoint: this.endpoint,\n            });\n        }\n        this.streams = [];\n        // give interpolateQueryStr access to this\n        this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n    }\n\n    query(options) {\n        const queries = _.filter(options.targets, t => { return t.hide !== true; })\n            .map(t => this.templateSrv.replace(t.program, options.scopedVars, this.interpolateQueryStr));\n        const program = queries.join('\\n');\n\n        const mutableOptions = _.clone(options)\n        mutableOptions.intervalMs = this.getMinResolution(options);\n        const aliases = this.collectAliases(options);\n        const maxDelay = this.getMaxDelay(options);\n\n        // TODO: Better validation can be implemented here \n        if (!program) {\n            return Promise.resolve({ data: [] });\n        }\n        return this.getSignalflowHandler(options).start(program, aliases, maxDelay, mutableOptions);\n    }\n\n    collectAliases(options) {\n        return _.fromPairs(_.filter(options.targets, t => { return t.hide !== true && t.program && t.alias; })\n            .map(t => { return { program: this.templateSrv.replace(t.program, options.scopedVars || {}, this.interpolateQueryStr), alias: t.alias }; })\n            .flatMap(t => this.extractLabelsWithAlias(t.program, t.alias)));\n    }\n\n    extractLabelsWithAlias(program, alias) {\n        const re = /label\\s?=\\s?'([\\w]*?)'/igm;\n        const labels = [];\n        let m;\n        do {\n            m = re.exec(program);\n            if (m) {\n                labels.push([m[1], alias]);\n            }\n        } while (m);\n        return labels;\n    }\n\n    getMaxDelay(options) {\n        let maxDelay = _.max(_.map(options.targets, t => t.maxDelay));\n        if (!maxDelay)\n            maxDelay = 0;\n        return maxDelay;\n    }\n\n    getMinResolution(options) {\n        let minResolution = _.max(_.map(options.targets, t => t.minResolution));\n        if (!minResolution)\n            minResolution = 0;\n        return Math.max(options.intervalMs, minResolution);\n    }\n\n    getSignalflowHandler(options) {\n        if (this.proxyAccess) {\n            return new ProxyHandler(this.datasourceId, this.backendSrv, this.templateSrv);\n        }\n        let handler = this.streams[options.panelId];\n        if (!handler) {\n            handler = new StreamHandler(this.signalflow, this.templateSrv);\n            this.streams[options.panelId] = handler;\n        }\n        return handler;\n    }\n\n    testDatasource() {\n        return this.doRequest({\n            url: '/v2/metric',\n            method: 'GET',\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    metricFindQuery(query) {\n        const metricNameQuery = query.match(/^metrics\\(([^\\)]*?)\\)/);\n        if (metricNameQuery) {\n            return this.getMetrics(this.templateSrv.replace(metricNameQuery[1]));\n        }\n        const propertyKeysQuery = query.match(/^property_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n        if (propertyKeysQuery) {\n            return this.getPropertyKeys(this.templateSrv.replace(propertyKeysQuery[1]), this.templateSrv.replace(propertyKeysQuery[3]));\n        }\n        const propertyValuesQuery = query.match(/^property_values\\(([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/);\n        if (propertyValuesQuery) {\n            return this.getPropertyValues(this.templateSrv.replace(propertyValuesQuery[1]), this.templateSrv.replace(propertyValuesQuery[2]), this.templateSrv.replace(propertyValuesQuery[4]));\n        }\n        const tagsQuery = query.match(/^tags\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n        if (tagsQuery) {\n            return this.getTags(this.templateSrv.replace(tagsQuery[1]), this.templateSrv.replace(tagsQuery[3]));\n        }\n        // const globalTagsQuery = query.match(/^tags\\(([^\\)]*?)\\)/);\n        // if (globalTagsQuery) {\n        //   return this.getGlobalTags(this.templateSrv.replace(globalTagsQuery[1]));\n        // }\n        this.q.when([]);\n    }\n\n    getMetrics(query) {\n        let mapFunc = this.proxyAccess ? this.mapPropertiesToTextValue : this.mapMetricsToTextValue;\n        return this.doQueryRequest('/v2/metric', 'name:' + (query ? query : '*'))\n            .then(mapFunc);\n    }\n\n    mapMetricsToTextValue(result) {\n        return _.map(result.data.results, d => {\n            return { text: d.name, value: d.name };\n        });\n    }\n\n    getPropertyKeys(metric, partialInput) {\n        return this.doSuggestQueryRequest(metric, null, partialInput);\n    }\n\n    getPropertyValues(metric, propertyKey, partialInput) {\n        return this.doSuggestQueryRequest(metric, propertyKey, partialInput);\n    }\n\n    getTags(metric, partialInput) {\n        return this.doSuggestQueryRequest(metric, 'sf_tags', partialInput);\n    }\n\n    mapPropertiesToTextValue(result) {\n        return _.map(result.data, d => {\n            return { text: d, value: d };\n        });\n    }\n\n    // getGlobalTags(query) {\n    //   return this.doQueryRequest('/v2/tag', query)\n    //     .then(this.mapMetricsToTextValue);\n    // }\n\n    doQueryRequest(path, query) {\n        return this.doRequest({\n            url: path,\n            params: { query: this.escapeQuery(query), limit: 100 },\n            method: 'GET',\n        });\n    }\n\n    doSuggestQueryRequest(metric, property, partialInput) {\n        const program = {\n            programText: 'data(\\'' + metric + '\\').publish(label=\\'A\\')',\n            packageSpecifications: ''\n        };\n        const request = {\n            programs: [program],\n            property,\n            partialInput: partialInput != null ? partialInput : '',\n            limit: 100,\n            additionalFilters: [],\n            additionalReplaceOnlyFilters: [],\n            additionalQuery: null\n        };\n        return this.doRequest({\n            url: '/v2/suggest/_signalflowsuggest',\n            data: JSON.stringify(request),\n            method: 'POST'\n        })\n            .then(this.mapPropertiesToTextValue);\n    }\n\n    escapeQuery(query) {\n        return query.replace(/[\\/]/g, '\\\\$&');\n    }\n\n    doRequest(options) {\n        if (this.proxyAccess) {\n            return this.doBackendProxyRequest(options);\n        }\n        options.headers = this.headers;\n        options.url = this.url + options.url;\n        return this.backendSrv.datasourceRequest(options);\n    }\n\n    doBackendProxyRequest(options) {\n        options.data = {\n            queries: [{\n                datasourceId: this.datasourceId,\n                path: options.url,\n                query: _.toPairs(options.params).map(p => encodeURIComponent(p[0]) + '=' + encodeURIComponent(p[1])).join('&'),\n                data: options.data\n            }]\n        };\n        options.url = '/api/tsdb/query';\n        options.method = 'POST';\n        return this.backendSrv.datasourceRequest(options).then(this.mapBackendProxyResponse);\n    }\n\n    mapBackendProxyResponse(response) {\n        //const table = response.data.results.items.tables[0];\n        //const results = []\n        //for (let row = 0; row < table.rows.length; row++) {\n        //    results.push(table.rows[row][0]);\n        //}\n        //response.data = results;\n        return response;\n    }\n\n    interpolateQueryStr(value, variable, defaultFormatFn) {\n        // if no multi or include all do not regexEscape\n        if (!variable.multi && !variable.includeAll) {\n            return this.escapeLiteral(value);\n        }\n\n        if (typeof value === 'string') {\n            return this.quoteLiteral(value);\n        }\n\n        const escapedValues = _.map(value, this.quoteLiteral);\n        return escapedValues.join(',');\n    }\n\n    quoteLiteral(value) {\n        return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n    }\n\n    escapeLiteral(value) {\n        return String(value).replace(/'/g, \"''\");\n    }\n\n}\n"]}